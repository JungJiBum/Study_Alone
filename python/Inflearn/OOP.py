###변수
# print("[변수를 사용한 캐릭터 정보 출력]")
# person1_name = 'bob'
# person1_age = 20
# person1_power = 7

# person2_name = 'john'
# person2_age = 30
# person2_power = 8

# print(f"귀하의 캐릭터{person1_name} 캐릭터 나이는 {person1_age}, 파워는 {person1_power} 이다.")
# print(f"귀하의 캐릭터{person2_name} 캐릭터 나이는 {person2_age}, 파워는 {person2_power} 이다.")
# print('-'*140)

# print("[리스트를 사용한 캐릭터 정보 출력]")
# person1 = ['bob',20,7]
# person2 = ['john',30,9]
# print(f"귀하의 캐릭터{person1[0]} 캐릭터 나이는 {person1[1]}, 파워는 {person1[2]} 이다.")
# print(f"귀하의 캐릭터{person2[0]} 캐릭터 나이는 {person2[1]}, 파워는 {person2[2]} 이다.")
# print('-'*140)

###함수 사용

# print(['함수와 리스트를 사용한 캐릭터 정보 출력'])
# #-------------------------------------------------
# import random

# def add_power_level(c_id):
#     c_id[2] = random.choice([1,2,3,4,5,6,7,8,9])
#     return c_id
# #-------------------------------------------------

# print("[함수 호출 전] : ",(person1, person2)) # 함수 호출 전
# print("[함수 호출 후] : ",add_power_level(person1), add_power_level(person2)) # 함수 호출 후

### 클래스 생성
# 클래스를 사용하면 변수와 함수를 하나로 묶어 데이터를 굉장히 효율적이면서 체계적으로 핸들링할 수 있음
# 클래스 내부에서 여러 다양한 변수나 함수가 정의되고 사용되는데 이를 --> 클래스 멤버 라고 함
# 대표적인 클래스 멤버 --> 변수, 메서드
# 메서드 --> 클래스의 행위나 동작을 구현 --> 함수 --> 클래스에서는 메서드라고 호칭하는 것 뿐임

# 클래스 작성
# (1) 클래스 작성 --> class 키워드로 선언 하고 클래스 명 지정
# (2) 클래스 이름 --> 관례적으로 CamelCase --> 파이썬은 보통 단어사이에 _를 넣는 편이나 클래스명은 카멜케이스를 따름
# (3) 함수가 아니기 때문에 클래스명 뒤에() 괄호를 하지않고 바로 콜론(:)을 붙여 종료함
# (4) 클래스 선언과 클래스명만 지정하고 바디는 pass 설정만 해놓아도 하나의 클래스가 만들어 짐 --> pass는 테스트 용도로 많이 쓰임
print("[클래스 생성]")
#---------------------------------------------
class PersonInfo:
    
    pass # -- 빈 상태로 테스트 시 많이 사용함 없으면 에러
#---------------------------------------------

# 클래스는 하나의 데이터 오브젝트(캐릭터)를 만들어내는 '공장'을 지은것
# 이 공장(클래스)을 통해 우리는 손쉽게 각각 Person 캐릭터 객체들을 만들어 낼 수 있음

